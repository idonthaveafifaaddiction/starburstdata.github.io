===========================
Hive Security Configuration
===========================

.. contents::
    :local:
    :backlinks: none
    :depth: 1

.. _hive-security-auth:

Authorization
=============

You can enable authorization checks for the :doc:`/connector/hive` by setting
the ``hive.security`` property in the Hive catalog properties file. This
property must be one of the following values:

================================================== ============================================================
Property Value                                     Description
================================================== ============================================================
``legacy`` (default value)                         Few authorization checks are enforced, thus allowing most
                                                   operations. The config properties ``hive.allow-drop-table``,
                                                   ``hive.allow-rename-table``, ``hive.allow-add-column``,
                                                   ``hive.allow-drop-column`` and
                                                   ``hive.allow-rename-column`` are used.

``read-only``                                      Operations that read data or metadata, such as ``SELECT``,
                                                   are permitted, but none of the operations that write data or
                                                   metadata, such as ``CREATE``, ``INSERT`` or ``DELETE``, are
                                                   allowed.

``file``                                           Authorization checks are enforced using a config file specified
                                                   by the Hive configuration property ``security.config-file``.
                                                   See :ref:`hive-file-based-authorization` for details.

``sql-standard``                                   Users are permitted to perform the operations as long as
                                                   they have the required privileges as per the SQL standard.
                                                   In this mode, Presto enforces the authorization checks for
                                                   queries based on the privileges defined in Hive metastore.
                                                   To alter these privileges, use the :doc:`/sql/grant` and
                                                   :doc:`/sql/revoke` commands.
                                                   See :ref:`hive-sql-standard-based-authorization` for details.

``sentry``                                         Authorization checks are enforced using an external Apache Sentry
                                                   service.
                                                   See :ref:`hive-sentry-authorization` for details.

``ranger``                                         Authorization checks are enforced using an external Apache Ranger
                                                   service.
                                                   See :ref:`hive-ranger-authorization` for details.
================================================== ============================================================

.. _hive-sql-standard-based-authorization:

SQL Standard Based Authorization
--------------------------------

When ``sql-standard`` security is enabled, Presto enforces the same SQL
standard based authorization as Hive does.

Since Presto's ``ROLE`` syntax support matches the SQL standard, and
Hive does not exactly follow the SQL standard, there are the following
limitations and differences:

* ``CREATE ROLE role WITH ADMIN`` is not supported.
* The ``admin`` role must be enabled to execute ``CREATE ROLE`` or ``DROP ROLE``.
* ``GRANT role TO user GRANTED BY someone`` is not supported.
* ``REVOKE role FROM user GRANTED BY someone`` is not supported.
* By default, all a user's roles except ``admin`` are enabled in a new user session.
* One particular role can be selected by executing ``SET ROLE role``.
* ``SET ROLE ALL`` enables all of a user's roles except ``admin``.
* The ``admin`` role must be enabled explicitly by executing ``SET ROLE admin``.

Authentication
==============

The default security configuration of the :doc:`/connector/hive` does not use
authentication when connecting to a Hadoop cluster. All queries are executed as
the user who runs the Presto process, regardless of which user submits the
query.

The Hive connector provides additional security options to support Hadoop
clusters that have been configured to use :ref:`Kerberos
<hive-security-kerberos-support>`.

When accessing :abbr:`HDFS (Hadoop Distributed File System)`, Presto can
:ref:`impersonate<hive-security-impersonation>` the end user who is running the
query. This can be used with HDFS permissions and :abbr:`ACLs (Access Control
Lists)` to provide additional security for data.

.. _hive-security-kerberos-support:

.. warning::

  Access to the Presto coordinator should be secured using Kerberos when using
  Kerberos authentication to Hadoop services. Failure to secure access to the
  Presto coordinator could result in unauthorized access to sensitive data on
  the Hadoop cluster.

  See :doc:`/security/server` and :doc:`/security/cli`
  for information on setting up Kerberos authentication.

Kerberos Support
================

In order to use the Hive connector with a Hadoop cluster that uses ``kerberos``
authentication, you will need to configure the connector to work with two
services on the Hadoop cluster:

* The Hive metastore Thrift service
* The Hadoop Distributed File System (HDFS)

Access to these services by the Hive connector is configured in the properties
file that contains the general Hive connector configuration.

.. note::

    If your ``krb5.conf`` location is different from ``/etc/krb5.conf`` you
    must set it explicitly using the ``java.security.krb5.conf`` JVM property
    in ``jvm.config`` file.

    Example: ``-Djava.security.krb5.conf=/example/path/krb5.conf``.

.. _hive-metastore-authentication:

Hive Metastore Thrift Service Authentication
--------------------------------------------

In a Kerberized Hadoop cluster, Presto connects to the Hive metastore Thrift
service using :abbr:`SASL (Simple Authentication and Security Layer)` and
authenticates using Kerberos. Kerberos authentication for the metastore is
configured in the connector's properties file using the following properties:

================================================== ============================================================
Property Name                                      Description
================================================== ============================================================
``hive.metastore.authentication.type``             Hive metastore authentication type.

``hive.metastore.service.principal``               The Kerberos principal of the Hive metastore service.

``hive.metastore.client.principal``                The Kerberos principal that Presto will use when connecting
                                                   to the Hive metastore service.

``hive.metastore.client.keytab``                   Hive metastore client keytab location.

``hive.metastore.impersonation-enabled``           Enable Metastore end user impersonation.
================================================== ============================================================

``hive.metastore.authentication.type``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

One of ``NONE`` or ``KERBEROS``. When using the default value of ``NONE``,
Kerberos authentication is disabled and no other properties need to be
configured.

When set to ``KERBEROS`` the Hive connector will connect to the Hive metastore
Thrift service using SASL and authenticate using Kerberos.

This property is optional; the default is ``NONE``.

``hive.metastore.service.principal``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The Kerberos principal of the Hive metastore service. The Presto coordinator
will use this to authenticate the Hive metastore.

The ``_HOST`` placeholder can be used in this property value. When connecting
to the Hive metastore, the Hive connector will substitute in the hostname of
the **metastore** server it is connecting to. This is useful if the metastore
runs on multiple hosts.

Example: ``hive/hive-server-host@EXAMPLE.COM`` or ``hive/_HOST@EXAMPLE.COM``.

This property is optional; no default value.

``hive.metastore.client.principal``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The Kerberos principal that Presto will use when connecting to the Hive
metastore.

The ``_HOST`` placeholder can be used in this property value. When connecting
to the Hive metastore, the Hive connector will substitute in the hostname of
the **worker** node Presto is running on. This is useful if each worker node
has its own Kerberos principal.

Example: ``presto/presto-server-node@EXAMPLE.COM`` or
``presto/_HOST@EXAMPLE.COM``.

This property is optional; no default value.

.. warning::

    Unless ``hive.metastore.impersonation-enabled`` is set,
    the principal specified by ``hive.metastore.client.principal`` must have
    sufficient privileges to remove files and directories within the
    ``hive/warehouse`` directory. If the principal does not, only the metadata
    will be removed, and the data will continue to consume disk space.

    This occurs because the Hive metastore is responsible for deleting the
    internal table data. When the metastore is configured to use Kerberos
    authentication, all of the HDFS operations performed by the metastore are
    impersonated. Errors deleting data are silently ignored.

``hive.metastore.client.keytab``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The path to the keytab file that contains a key for the principal specified by
``hive.metastore.client.principal``. This file must be readable by the
operating system user running Presto.

This property is optional; no default value.

``hive.metastore.impersonation-enabled``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable end-user impersonation when communicating with Hive Metastore.

The section :ref:`hive-security-impersonation` gives an
in-depth explanation of impersonation.

This property is optional; the default is ``false``.

Example configuration with ``NONE`` authentication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: none

    hive.metastore.authentication.type=NONE

The default authentication type for the Hive metastore is ``NONE``. When the
authentication type is ``NONE``, Presto connects to an unsecured Hive
metastore. Kerberos is not used.

Example configuration with ``KERBEROS`` authentication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: none

    hive.metastore.authentication.type=KERBEROS
    hive.metastore.service.principal=hive/hive-metastore-host.example.com@EXAMPLE.COM
    hive.metastore.client.principal=presto@EXAMPLE.COM
    hive.metastore.client.keytab=/etc/presto/hive.keytab

When the authentication type for the Hive metastore Thrift service is
``KERBEROS``, Presto will connect as the Kerberos principal specified by the
property ``hive.metastore.client.principal``. Presto will authenticate this
principal using the keytab specified by the ``hive.metastore.client.keytab``
property, and will verify that the identity of the metastore matches
``hive.metastore.service.principal``.

Keytab files must be distributed to every node in the cluster that runs Presto.

:ref:`Additional Information About Keytab Files.<hive-security-additional-keytab>`

HDFS Authentication
-------------------

In a Kerberized Hadoop cluster, Presto authenticates to HDFS using Kerberos.
Kerberos authentication for HDFS is configured in the connector's properties
file using the following properties:

================================================== ============================================================
Property Name                                      Description
================================================== ============================================================
``hive.hdfs.authentication.type``                  HDFS authentication type.
                                                   Possible values are ``NONE`` or ``KERBEROS``.

``hive.hdfs.impersonation.enabled``                Enable HDFS end-user impersonation.

``hive.hdfs.presto.principal``                     The Kerberos principal that Presto will use when connecting
                                                   to HDFS.

``hive.hdfs.presto.keytab``                        HDFS client keytab location.
================================================== ============================================================

``hive.hdfs.authentication.type``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

One of ``NONE`` or ``KERBEROS``. When using the default value of ``NONE``,
Kerberos authentication is disabled and no other properties need to be
configured.

When set to ``KERBEROS``, the Hive connector authenticates to HDFS using
Kerberos.

This property is optional; the default is ``NONE``.

``hive.hdfs.impersonation.enabled``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Enable end-user HDFS impersonation.

The section :ref:`End User Impersonation<hive-security-impersonation>` gives an
in-depth explanation of HDFS impersonation.

This property is optional; the default is ``false``.

``hive.hdfs.presto.principal``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The Kerberos principal that Presto will use when connecting to HDFS.

The ``_HOST`` placeholder can be used in this property value. When connecting
to HDFS, the Hive connector will substitute in the hostname of the **worker**
node Presto is running on. This is useful if each worker node has its own
Kerberos principal.

Example: ``presto-hdfs-superuser/presto-server-node@EXAMPLE.COM`` or
``presto-hdfs-superuser/_HOST@EXAMPLE.COM``.

This property is optional; no default value.

``hive.hdfs.presto.keytab``
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The path to the keytab file that contains a key for the principal specified by
``hive.hdfs.presto.principal``. This file must be readable by the operating
system user running Presto.

This property is optional; no default value.

.. _hive-security-simple:

Example configuration with ``NONE`` authentication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: none

    hive.hdfs.authentication.type=NONE

The default authentication type for HDFS is ``NONE``. When the authentication
type is ``NONE``, Presto connects to HDFS using Hadoop's simple authentication
mechanism. Kerberos is not used.

.. _hive-security-kerberos:

Example configuration with ``KERBEROS`` authentication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: none

    hive.hdfs.authentication.type=KERBEROS
    hive.hdfs.presto.principal=hdfs@EXAMPLE.COM
    hive.hdfs.presto.keytab=/etc/presto/hdfs.keytab

When the authentication type is ``KERBEROS``, Presto accesses HDFS as the
principal specified by the ``hive.hdfs.presto.principal`` property. Presto will
authenticate this principal using the keytab specified by the
``hive.hdfs.presto.keytab`` keytab.

Keytab files must be distributed to every node in the cluster that runs Presto.

:ref:`Additional Information About Keytab Files.<hive-security-additional-keytab>`

.. _hive-security-impersonation:

End User Impersonation
======================

Impersonation Accessing HDFS
----------------------------

Presto can impersonate the end user who is running a query. In the case of a
user running a query from the command line interface, the end user is the
username associated with the Presto CLI process or argument to the optional
``--user`` option. Impersonating the end user can provide additional security
when accessing HDFS if HDFS permissions or ACLs are used.

HDFS Permissions and ACLs are explained in the `HDFS Permissions Guide
<https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsPermissionsGuide.html>`_.

.. _hive-security-simple-impersonation:

``NONE`` authentication with HDFS impersonation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: none

    hive.hdfs.authentication.type=NONE
    hive.hdfs.impersonation.enabled=true

When using ``NONE`` authentication with impersonation, Presto impersonates
the user who is running the query when accessing HDFS. The user Presto is
running as must be allowed to impersonate this user, as discussed in the
section :ref:`configuring-hadoop-impersonation`. Kerberos is not used.

.. _hive-security-kerberos-impersonation:

``KERBEROS`` Authentication With HDFS Impersonation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: none

    hive.hdfs.authentication.type=KERBEROS
    hive.hdfs.impersonation.enabled=true
    hive.hdfs.presto.principal=presto@EXAMPLE.COM
    hive.hdfs.presto.keytab=/etc/presto/hdfs.keytab

When using ``KERBEROS`` authentication with impersonation, Presto impersonates
the user who is running the query when accessing HDFS. The principal
specified by the ``hive.hdfs.presto.principal`` property must be allowed to
impersonate this user, as discussed in the section
:ref:`configuring-hadoop-impersonation`. Presto authenticates
``hive.hdfs.presto.principal`` using the keytab specified by
``hive.hdfs.presto.keytab``.

Keytab files must be distributed to every node in the cluster that runs Presto.

:ref:`Additional Information About Keytab Files.<hive-security-additional-keytab>`

Impersonation Accessing the Hive Metastore
------------------------------------------

Presto supports impersonating the end user when accessing the Hive metastore only when
using :ref:`Metastore with Kerberos authentication enabled<hive-security-impersonation>`.

Impersonation needs to be enabled with

.. code-block:: none

    hive.metastore.impersonation-enabled=true
    hive.metastore.authentication.type=KERBEROS

When using ``KERBEROS`` Metastore authentication with impersonation, Presto impersonates
the user who is running the query when accessing Metastore on certain queries. The principal
specified by the ``hive.metastore.client.principal`` property must be allowed to
impersonate this user, as discussed in the section :ref:`configuring-hadoop-impersonation`.

The impersonation is applied when:

* modifying (creating or deleting) a database (schema)
* getting information about a single table
* modifying a table

Impersonation is not applied when for the following operations. In case of the following operations,
Presto is fully responsible for doing all relevant security checks.

* listing databases (schemas)
* listing tables
* listing roles, grants
* changing roles, grants

.. _configuring-hadoop-impersonation:

Impersonation in Hadoop
-----------------------

In order to use impersonation, the Hadoop cluster must be
configured to allow the user or principal that Presto is running as to
impersonate the users who log in to Presto. Impersonation in Hadoop is
configured in the file :file:`core-site.xml`. A complete description of the
configuration options can be found in the `Hadoop documentation
<https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/Superusers.html#Configurations>`_.

.. _hive-security-additional-keytab:

Additional Information About Keytab Files
=========================================

Keytab files contain encryption keys that are used to authenticate principals
to the Kerberos :abbr:`KDC (Key Distribution Center)`. These encryption keys
must be stored securely; you should take the same precautions to protect them
that you would to protect ssh private keys.

In particular, access to keytab files should be limited to the accounts that
actually need to use them to authenticate. In practice, this is the user that
the Presto process runs as. The ownership and permissions on keytab files
should be set to prevent other users from reading or modifying the files.

Keytab files need to be distributed to every node running Presto. Under common
deployment situations, the Hive connector configuration will be the same on all
nodes. This means that the keytab needs to be in the same location on every
node.

You should ensure that the keytab files have the correct permissions on every
node after distributing them.

.. _hive-file-based-authorization:

File Based Authorization
========================

The config file is specified using JSON and is composed of three sections,
each of which is a list of rules that are matched in the order specified
in the config file. The user is granted the privileges from the first
matching rule. All regexes default to ``.*`` if not specified.

Schema Rules
------------

These rules govern who is considered an owner of a schema.

* ``user`` (optional): regex to match against user name.

* ``schema`` (optional): regex to match against schema name.

* ``owner`` (required): boolean indicating ownership.

Table Rules
-----------

These rules govern the privileges granted on specific tables.

* ``user`` (optional): regex to match against user name.

* ``schema`` (optional): regex to match against schema name.

* ``table`` (optional): regex to match against table name.

* ``privileges`` (required): zero or more of ``SELECT``, ``INSERT``,
  ``DELETE``, ``OWNERSHIP``, ``GRANT_SELECT``.

Session Property Rules
----------------------

These rules govern who may set session properties.

* ``user`` (optional): regex to match against user name.

* ``property`` (optional): regex to match against session property name.

* ``allowed`` (required): boolean indicating whether this session property may be set.

See below for an example.

.. code-block:: json

    {
      "schemas": [
        {
          "user": "admin",
          "schema": ".*",
          "owner": true
        },
        {
          "user": "guest",
          "owner": false
        },
        {
          "schema": "default",
          "owner": true
        }
      ],
      "tables": [
        {
          "user": "admin",
          "privileges": ["SELECT", "INSERT", "DELETE", "OWNERSHIP"]
        },
        {
          "user": "banned_user",
          "privileges": []
        },
        {
          "schema": "default",
          "table": ".*",
          "privileges": ["SELECT"]
        }
      ],
      "sessionProperties": [
        {
          "property": "force_local_scheduling",
          "allow": true
        },
        {
          "user": "admin",
          "property": "max_split_size",
          "allow": true
        }
      ]
    }

.. _hive-sentry-authorization:

Apache Sentry Based Authorization
=================================

When ``sentry`` security is enabled, Presto enforces the same SQL
standard based authorization as Hive does when Sentry is enabled for Hive.

Sentry authorization information can be accessed by querying the following tables:
 * ``information_schema.roles`` - return information about all existing roles (equivalent of ``SHOW ROLES``)
 * ``information_schema.applicable_roles`` - return roles that are granted to current user
 * ``information_schema.enabled_roles`` - return a list of roles that currently user is using at the moment (equivalent of ``SHOW CURRENT USER``)
 * ``information_schema.table_privileges`` - return all tables privileges granted to user according to currently enabled roles

Presto does not support any modification of authorization policies in Sentry.

See :doc:`Presto with Apache Sentry <../security/sentry>` for additional information.

================================================== ============================================================
Property Name                                      Description
================================================== ============================================================
``sentry.server``                                  The name of the server object in Sentry that Presto will use
                                                   to find authorization rules.
                                                   This should be set to value of ``hive.sentry.server``
                                                   from Hive's configuration XML files.
``sentry.admin-user``                              Admin user of Apache Sentry that has ``ALL`` access to
                                                   server object. It is a user that belongs to any group that are
                                                   mentioned in ``sentry.service.admin.group`` property in ``sentry-site.xml``
                                                   Sentry service configuration file.
``sentry.rpc-addresses``                           Address on which sentry RPC is available.
``sentry.rpc-port``                                Port at which Sentry is listening.
``sentry.authentication-type``                     Authentication method that will be used when connecting to
                                                   Sentry service.
                                                   Possible values are ``NONE`` or ``KERBEROS``.
``sentry.service-principal``                       Sentry service Kerberos principal that will be used to authenticate
                                                   the Sentry service.
                                                   This property is only used when ``sentry.authentication-type=KERBEROS``.
``sentry.client-principal``                        Sentry client Kerberos principal that will be used to authenticate
                                                   the client when connecting to Sentry service.
                                                   The primary part of this principal (user) should be
                                                   included in ``sentry.service.allow.connect`` property in ``sentry-site.xml``
                                                   Sentry service configuration file.
                                                   This property is only used when ``sentry.authentication-type=KERBEROS``.
``sentry.client-key-tab``                          Sentry client Kerberos keytab file location that will be used to
                                                   authenticate the client when connecting to to Sentry service.
                                                   This property is only used when ``sentry.authentication-type=KERBEROS``.
``sentry.cache-ttl``                               Period where information returned by Sentry will be
                                                   cached in Presto. ``0ms`` disables the cache. By default it is set to ``1m``.
``sentry.group-mapping``                           Defines the way how user group are determined.
                                                   Possible values are:
                                                   - ``HADOOP_DEFAULT`` user groups will be retrieved from
                                                   hadoop client library. You may want to use
                                                   ``sentry.config.resources`` to customize this behaviour.
                                                   - ``SYSTEM`` user groups will be retrieved from operating
                                                   system that Presto is running on
                                                   - ``LDAP`` user groups will be retrieved from LDAP.
``sentry.ldap.url``                                Address of LDAP service when ``sentry.group-mapping==LDAP``.
``sentry.ldap.user``                               LDAP user name when ``sentry.group-mapping==LDAP``.
``sentry.ldap.password``                           LDAP user password when ``sentry.group-mapping==LDAP``.
``sentry.ldap.search-base``                        Configures the search base for the LDAP connection
                                                   when ``sentry.group-mapping==LDAP``.
``sentry.ldap.user-search-filter``                 Additional filters to apply when when searching for users
                                                   when ``sentry.group-mapping==LDAP``.
``sentry.ldap.group-search-filter``                Additional filters to apply when finding relevant groups
                                                   when ``sentry.group-mapping==LDAP``.
``sentry.ldap.group-member-attribute``             LDAP attribute to use for determining group membership
                                                   when ``sentry.group-mapping==LDAP``.
``sentry.ldap.group-name-attribute``               LDAP attribute to use for identifying a group's name
                                                   when ``sentry.group-mapping==LDAP``.
``sentry.group-mapping.cache-ttl``                 Period where group mapping information will be
                                                   cached in Presto. ``0ms`` disables the cache.
                                                   By default it is set to ``1min``.
``sentry.group-mapping.negative-cache-ttl``        Period where information about empty group will be
                                                   cached in Presto. ``0ms`` disables the cache.
``sentry.config.resources``                        Additional XML configuration files which will be read before
                                                   applying Presto Sentry configuration. Useful for reusing
                                                   existing ``sentry-site.xml`` configuration files.
================================================== ============================================================

Sample Configuration
--------------------
The following is a sample of a Hive Connector configuration file that is configure to use Apache Sentry for authorization.
It utilizes Kerberos for authentication and LDAP for group mapping.

.. code-block:: none

    connector.name=hive-hadoop2
    hive.metastore.uri=thrift://hive-metastore-node:9083

    hive.metastore.authentication.type=KERBEROS
    hive.metastore.service.principal=hive/hive-metastore-node@EXAMPLE.COM
    hive.metastore.client.principal=hive/presto-server-node@EXAMPLE.COM
    hive.metastore.client.keytab=/etc/hive/conf/hive.keytab

    hive.hdfs.authentication.type=KERBEROS
    hive.hdfs.impersonation.enabled=false
    hive.hdfs.presto.principal=hdfs/presto-server-node@EXAMPLE.COM
    hive.hdfs.presto.keytab=/etc/hadoop/conf/hdfs.keytab

    hive.security=sentry

    sentry.server=sentryserver
    sentry.admin-user=hive
    sentry.rpc-addresses=sentry-host-address
    sentry.rpc-port=8038

    sentry.authentication-type=KERBEROS

    sentry.service-principal=sentry/sentry-node@EXAMPLE.COM
    sentry.client-principal=presto-server/presto-server-node@EXAMPLE.COM
    sentry.client-key-tab=/etc/presto/conf/presto-server.keytab

    sentry.group-mapping=LDAP
    sentry.ldap.url=ldaps://ldapserver/
    sentry.ldap.user=cn=admin,dc=presto,dc=example,dc=com
    sentry.ldap.password=secret1234
    sentry.ldap.search-base=dc=presto,dc=example,dc=com
    sentry.ldap.user-search-filter=(&(objectClass=inetOrgPerson)(uid={0}))
    sentry.ldap.group-search-filter=(objectClass=groupOfNames)
    sentry.ldap.group-member-attribute=member
    sentry.ldap.group-name-attribute=cn

    sentry.group-mapping.cache-ttl=10s

.. _hive-ranger-authorization:

Apache Ranger Based Authorization
=================================

When ``ranger`` security is enabled, Presto enforces the same SQL
standard based authorization as Hive does when Ranger is enabled for Hive.

See :doc:`Presto with Apache Ranger <../security/ranger>` for additional information.

========================================================== ==========================================================================================
Property Name                                              Description
========================================================== ==========================================================================================
``ranger.policy-rest-url``                                 Address URL of Ranger service.
``ranger.service-name``                                    Ranger Presto plugin service name.
``ranger.authentication-type``                             Authentication method that will be used when connecting to
                                                           Ranger service.
                                                           Possible values are:
                                                           - ``BASIC`` - HTTP basic authentication
                                                           - ``KERBEROS`` - Kerberos authentication
                                                           Notice that ``ranger.authentication-type=KERBEROS`` requires
                                                           ``https`` protocol to be used for ``ranger.policy-rest-url``.
``ranger.presto-plugin-username``                          Ranger Presto plugin user name. This property is used when
                                                           ``ranger.authentication-type=BASIC`` is set.
``ranger.presto-plugin-password``                          Ranger Presto plugin user password. This property is used when
                                                           ``ranger.authentication-type=BASIC`` is set.
``ranger.kerberos-principal``                              Ranger client Kerberos principal. This property is used when
                                                           ``ranger.authentication-type=KERBEROS`` is set.
``ranger.kerberos-keytab``                                 Ranger client Kerberos keytab file location. This property is used when
                                                           ``ranger.authentication-type=KERBEROS`` is set.
``ranger.plugin-policy-ssl-config-file``                   Path to Ranger SSL configuration file. This file is required when
                                                           ``https`` protocol is used for ``ranger.policy-rest-url``.
``ranger.policy-refresh-interval``                         Interval determining how often authorization polices will
                                                           be refreshed. The highest latency after which changes in
                                                           Ranger authorization policies will be visible in Presto. By default it is set to ``30s``.
``ranger.policy-connection-timeout``                       Ranger service connection timeout. By default it is set to ``30s``.
``ranger.policy-read-timeout``                             Ranger service read timeout. By default it is set to ``30s``.
``ranger.cache-ttl``                                       Period where group mapping information will be cached in Presto. ``0ms`` disables the cache.
                                                           By default it is set to ``30s``.
``ranger.enable-row-filtering``                            To enable row filtering please set this flag to ``true``. Note that there are semantic
                                                           differences between Presto SQL and Hive QL.
``ranger.wild-card-resource-matching-for-row-filtering``   To enable resource wild card matching for row filtering please set this flag to ``true``.
                                                           When two policies are matching single resource, the one without wildcards will be used.
                                                           When multiple wildcard policies match, it is undetermined which one will be used.
``ranger.wild-card-resource-matching-for-column-masking``  To enable resource wild card matching for column masking please set this flag to ``true``.
                                                           When two policies are matching single resource, the one without wildcards will be used.
                                                           When multiple wildcard policies match, it is undetermined which one will be used.
``ranger.config-resources``                                Additional XML configuration files which will be read before applying Presto Ranger
                                                           configuration. Useful for reusing existing Hive Ranger configuration with things like
                                                           Ranger Audit configuration.
========================================================== ==========================================================================================

Column masking
--------------

Presto Hive Rannger integration supports most of the column masking methods that are supported in Hive with Ranger.
Presto does not distinguish upper case, lower case and digital characters when masking.
``x`` is used for all mentioned character types.

Sample Configuration
--------------------
The following is a sample of a Hive Connector configuration file that is configured to use Apache Ranger for
authorization. It utilizes Kerberos for authentication.

.. code-block:: none

    connector.name=hive-hadoop2
    hive.metastore.uri=thrift://hive-metastore-node:9083

    hive.metastore.authentication.type=KERBEROS
    hive.metastore.service.principal=hive/hive-metastore-node@EXAMPLE.COM
    hive.metastore.client.principal=hive/presto-server-node@EXAMPLE.COM
    hive.metastore.client.keytab=/etc/hive/conf/hive.keytab

    hive.hdfs.authentication.type=KERBEROS
    hive.hdfs.impersonation.enabled=false
    hive.hdfs.presto.principal=hdfs/presto-server-node@EXAMPLE.COM
    hive.hdfs.presto.keytab=/etc/hadoop/conf/hdfs.keytab

    hive.security=ranger

    ranger.policy-rest-url=https://ranger-host:6182
    ranger.service-name=hive

    ranger.authentication-type=KERBEROS
    ranger.kerberos-principal=presto-server/presto-server-node@EXAMPLE.COM
    ranger.kerberos-keytab=/etc/presto/conf/presto-server.keytab
    ranger.plugin-policy-ssl-config-file=/etc/hive/conf/ranger-policymgr-ssl.xml

The following is a sample of Ranger SSL configuration file.

.. code-block:: none

    <configuration>
        <!--  The following properties are used for 2-way SSL client server validation -->
        <property>
            <name>xasecure.policymgr.clientssl.keystore</name>
            <value>/etc/hive/conf/ranger-plugin-keystore.jks</value>
        </property>
        <property>
            <name>xasecure.policymgr.clientssl.truststore</name>
            <value>/etc/hive/conf/ranger-plugin-truststore.jks</value>
        </property>
        <property>
            <name>xasecure.policymgr.clientssl.keystore.credential.file</name>
            <value>jceks://file/etc/ranger/hivedev/cred.jceks</value>
        </property>
        <property>
            <name>xasecure.policymgr.clientssl.truststore.credential.file</name>
            <value>jceks://file/etc/ranger/hivedev/cred.jceks</value>
        </property>
    </configuration>

Configuring Ranger Audit
------------------------

To configure Ranger Audit the following has to be added to the ``hive.properties``, 
where ``/etc/hive/conf/ranger-hive-audit.xml`` is the actual configuration of the Ranger Audit.

.. code-block:: none

   ranger.config-resources=/etc/hive/conf/ranger-hive-audit.xml

Controlling access to User Defined Functions with Ranger
--------------------------------------------------------
Ranger System Access Control is used to enforce User Defined Function (UDF) policies set by Ranger.
A UDF in Presto is deployed as a plugin (:doc:`/develop/functions`) and stored in the Presto global
namespace. This global namespace is managed at the System Access Control 
(see :doc:`/develop/system-access-control`) level. This is independent of the Ranger Connector 
Access Control used to enforce all other Ranger policies at the catalog level.

The Ranger resource hierarchy for all UDF policies need to have an associated database (or schema)
namespace when creating the policy. Because the global namespace is independent of any connector
namespace, this poses a slight challenge to control access to UDFs using Ranger. To overcome this
you must specify ``$presto`` as the database name in Ranger. This will keep all Presto
functions are under the ``$presto`` database in Ranger resource hierarchy.

To configure Ranger System Access Control for User Defined Functions, you need to add the following
to the System Access Control property file. Here is an example ``etc/access-control.properties``
below:

.. code-block:: none

    access-control.name=ranger-system-access-control
    ranger.policy-rest-url=https://ranger-host:6182
    ranger.service-name=hive

    ranger.authentication-type=KERBEROS
    ranger.kerberos-principal=presto-server/presto-server-node@EXAMPLE.COM
    ranger.kerberos-keytab=/etc/presto/conf/presto-server.keytab
    ranger.plugin-policy-ssl-config-file=/etc/hive/conf/ranger-policymgr-ssl.xml

All Ranger properties that are allowed in ``hive.properties`` are allowed here. However Ranger
properties related to row filtering or column masking are ignored. This additional configuration is
needed because the Ranger System Access Control uses an independent Ranger client from the Ranger
Connector Access Control.

Recall that in Presto only one System Access Control can be defined, while Connector Access
Control can be defined per each Presto catalog. In the scenario where there are multiple Hive
connectors and multiple Ranger services, only one of those Ranger services can be used to managed
the UDF policies.

Limitations
-----------

Ranger authorization in Presto has following limitations:
 * authorization information cannot be accessed by querying the following tables like:
   ``information_schema.roles``, ``information_schema.applicable_roles``,
   ``information_schema.enabled_roles``, ``information_schema.table_privileges``
 * Presto does not support any modification of authorization policies in Sentry, this
   encloses commands like ``CREATE ROLE...``, ``GRANT...`` or ``REVOKE``.
 * Presto does not support ``SET ROLE...`` for Ranger authorization, by default all user applicable roles are enabled.
 * In case of usage of unsupported column masking ``MASK_NULL`` will be used.


HDFS wire encryption
====================

In a Kerberized Hadoop cluster with enabled HDFS wire encryption you can enable
Presto to access HDFS by using below property.

===================================== ==========================================
Property Name                         Description
===================================== ==========================================
``hive.hdfs.wire-encryption.enabled`` Enables HDFS wire encryption.
                                      Possible values are ``true`` or ``false``.
===================================== ==========================================

.. note::

    Depending on Presto installation configuration, using wire encryption may
    impact query execution performance.
